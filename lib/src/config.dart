/// A "generator" of an inverse argument for a flag. An inverse generator is
/// given the name of a flag (e.g. for `-x` it would be `x`) and should return
/// a string of its inverse (e.g. `no-x`), or `null` if no inverse should be
/// used.
///
/// If all you want is a sensible, default inverse generator, see
/// [PrefixInverseGenerator].
///
/// ```dart
/// InverseGenerator myGenerator = (s) => 'no-$s';
/// ```
typedef InverseGenerator = String? Function(String name);

/// An implementation of [InverseGenerator] that can either swap an argument's
/// prefix for another, or append a new "generic" prefix if none of the known
/// swap mappings are present.
///
/// By default:
/// - The prefix `with-` will be swapped with `without-`.
/// - The prefix `enable-` will be swapped with `disable-`.
/// - All other arguments will have `no-` prepended to them.
///
/// These defaults are available in [defaultGeneric] and [defaultSwap].
class PrefixInverseGenerator {
  static const defaultGeneric = 'no-';
  static const defaultSwap = {
    'with-': 'without-',
    'enable-': 'disable-',
  };

  final String? generic;
  final Map<String, String> swap;

  /// Creates a new generator. [swap] is a mapping of prefixes, such that any
  /// arguments with a prefix as a key in the mapping will have that swapped out
  /// with the corresponding value. Any other arguments will have [generic]
  /// prepended as a prefix if it is not `null`, otherwise no inverse will be
  /// generated.
  PrefixInverseGenerator(
      {this.generic = defaultGeneric, this.swap = defaultSwap});

  String? call(String name) {
    for (var entry in swap.entries) {
      if (name.startsWith(entry.key)) {
        return entry.value + name.substring(entry.key.length);
      }
    }

    return generic != null ? generic! + name : null;
  }
}

/// A set of configuration options that can be passed to an [ArgParser].
class ArgConfig {
  /// The prefix to use for long options, e.g. `--`.
  final String longPrefix;

  /// The prefix to use for short options, e.g. `-`. If `null`, short options
  /// are disabled.
  final String? shortPrefix;

  /// Whether or not option parsing will be terminated after the first
  /// positional argument. For instance, given `-x y -z`, if this is enabled,
  /// only `-x` will be an option, and `y` and `-z` will be positional
  /// arguments.
  final bool noOptionsAfterPositional;

  /// The delimiter after which option parsing will be terminated. For posix,
  /// this is usually `--`, so `a -- -b` will have `a` and `-b` all parsed as
  /// positional arguments.
  final String? disableOptionsAfter;

  /// The function used to generate inverses of flags. If `null`, then no
  /// inverses will be generated by default.
  final InverseGenerator? inverseGenerator;

  const ArgConfig(
      {required this.longPrefix,
      required this.shortPrefix,
      this.noOptionsAfterPositional = false,
      this.disableOptionsAfter,
      this.inverseGenerator});

  /// Creates a copy of this configuration, with any non-null parameters changed
  /// to the new values. As `null` is used to signify the lack of a new value,
  /// this function cannot be used to *unset* configuration parameters; use
  /// [copyWithout()] for that instead.
  ArgConfig copyWith(
          {String? longPrefix,
          String? shortPrefix,
          bool? noOptionsAfterPositional,
          String? disableOptionsAfter,
          InverseGenerator? inverseGenerator}) =>
      ArgConfig(
          longPrefix: longPrefix ?? this.longPrefix,
          shortPrefix: shortPrefix ?? this.shortPrefix,
          noOptionsAfterPositional:
              noOptionsAfterPositional ?? this.noOptionsAfterPositional,
          disableOptionsAfter: disableOptionsAfter ?? this.disableOptionsAfter,
          inverseGenerator: inverseGenerator ?? this.inverseGenerator);

  /// Creates a copy of this configuration, with any `true` parameters replaced
  /// with `null`.
  ArgConfig copyWithout(
          {bool shortPrefix = false,
          bool disableOptionsAfter = false,
          bool inverseGenerator = false}) =>
      ArgConfig(
          longPrefix: longPrefix,
          shortPrefix: shortPrefix ? null : this.shortPrefix,
          noOptionsAfterPositional: noOptionsAfterPositional,
          disableOptionsAfter:
              disableOptionsAfter ? null : this.disableOptionsAfter,
          inverseGenerator: inverseGenerator ? null : this.inverseGenerator);

  /// A configuration approximating POSIX-style argument parsing. This is
  /// similar to [gnu], but options cannot come after a positional by default.
  /// Note that this also includes long option support, as Plade does not
  /// support disabling long options.
  static const posixLike = ArgConfig(
      longPrefix: '--',
      shortPrefix: '-',
      noOptionsAfterPositional: true,
      disableOptionsAfter: '--');

  /// A configuration approximating GNU-style option parsing, which is the
  /// general standard on most Unix-like systems.
  static const gnu =
      ArgConfig(longPrefix: '--', shortPrefix: '-', disableOptionsAfter: '--');

  /// A configuration approximating Go-style option parsing. In particular,
  /// short options are disabled. Unlike Go, this does not support
  /// automatically inferring a full argument name given just its prefix.
  static const go = ArgConfig(
      longPrefix: '-', shortPrefix: null, noOptionsAfterPositional: true);

  /// A configuration approximating Windows-style argument parsing. I have no
  /// idea why anyone would want to use this.
  static const windows = ArgConfig(longPrefix: '/', shortPrefix: null);

  /// The default configuration, using GNU-style parsing.
  static const defaultConfig = gnu;
}
